******************Conditional Statements in c******************
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();



int main()
{
    char* n_endptr;
    char* n_str = readline();
    int n = strtol(n_str, &n_endptr, 10);

    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    // Write Your Code Here
    if(n==1 ){
        printf("one"); 
    }else if(n==2){
        printf("two");
    }else if(n==3){
        printf("three");
    }else if(n==4){
        printf("four");
    }else if(n==5){
        printf("five");
    }else if(n==6){
        printf("six");
    }else if(n==7){
        printf("seven");
    }else if(n==8){
        printf("eight");
    }else if(n==9){
        printf("nine");
    }else {
        printf("Greater than 9");
    }

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
************************For Loop in c ******************
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



int main() 
{
    int a, b;
    scanf("%d\n%d", &a, &b);
  	// Complete the code.
    for (int i =a; i <= b; i++){
        if(i >=1 && i<=9){
            if(i == 1){
                printf("one\n");
            }else if(i == 2){
                printf("two\n");
            }else if(i == 3){
                printf("three\n");
            }else if(i==4){
                printf("four\n");
            }else if(i==5){
                printf("five\n");
            }else if(i ==6){
                printf("six\n");
            }else if(i == 7){
                printf("seven\n");
            }else if(i == 8){
                printf("eight\n");
            }else if(i==9){
                printf("nine\n");
            }
        }else {
            if(i % 2 == 0){
                printf("even\n");
            }else {
                printf("odd\n");
            }
        }
    }  

    return 0;
}
******************Sum of Digits of a Five Digits Number*********************
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
	
    int n, sum =0;
    scanf("%d", &n);
    //Complete the code to calculate the sum of the five digits on n.
    while(n > 0){
        sum += n %10;
        n = n/10;
    }
    printf("%d",sum);
    return 0;
}
********************Bitwise Operators******************
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
//Complete the following function.


void calculate_the_maximum(int n, int k) {
  //Write your code here.
  int amax, omax, xmax ;
  amax = omax = xmax = 0;
  for(int i = 1; i < n; i ++){
      for(int j = i+1; j <=n; j++){
          amax = (i & j) > amax && (i & j) < k ? i & j : amax;
          omax = (i | j) > omax && (i | j) < k ? i | j : omax;
          xmax = (i ^ j) > xmax && (i ^ j) < k ? i ^ j : xmax;
      }
  } 
  printf("%d\n", amax);
  printf("%d\n", omax);
  printf("%d\n", xmax);
}

int main() {
    int n, k;
  
    scanf("%d %d", &n, &k);
    calculate_the_maximum(n, k);
 
    return 0;
}
*************************Bitwise Operators**********************
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
//Complete the following function.


void calculate_the_maximum(int n, int k) {
  //Write your code here.
  int amax, omax, xmax ;
  amax = omax = xmax = 0;
  for(int i = 1; i < n; i ++){
      for(int j = i+1; j <=n; j++){
          amax = (i & j) > amax && (i & j) < k ? i & j : amax;
          omax = (i | j) > omax && (i | j) < k ? i | j : omax;
          xmax = (i ^ j) > xmax && (i ^ j) < k ? i ^ j : xmax;
      }
  } 
  printf("%d\n", amax);
  printf("%d\n", omax);
  printf("%d\n", xmax);
}

int main() {
    int n, k;
  
    scanf("%d %d", &n, &k);
    calculate_the_maximum(n, k);
 
    return 0;
}
******************Printing Pattern Usinng Loops*******************
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void check(int i, int j, int first, int last, int n) {
  if(n >=1 ){
    if (i == first || i == last || j == first || j == last)
        printf("%d ", n);
    else
        check(i, j, first + 1, last - 1, n - 1);
  }
}

int main() 
{
    int n;
    scanf("%d", &n);
    int rows = 2 * n - 1;

    for (int i = 0; i < rows; i ++) {
        for (int j = 0; j < rows; j ++) {
            check(i, j, 0, rows - 1, n);
        }
        printf("\n");
    }
    return 0;
}

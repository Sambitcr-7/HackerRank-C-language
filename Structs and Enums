*********************************Box through a Tunnel*********************
#include <stdio.h>
#include <stdlib.h>
#define MAX_HEIGHT 41

struct box
{
    int length;
    int height;
    int width;
};

typedef struct box box;

int get_volume(box b) {
    return (b.length * b.height * b.width);
}

int is_lower_than_max_height(box b) {
    if(b.height < MAX_HEIGHT) return 1;
    else return 0;
}

int main()
{
	int n;
	scanf("%d", &n);
	box *boxes = malloc(n * sizeof(box));
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &boxes[i].length, &boxes[i].width, &boxes[i].height);
	}
	for (int i = 0; i < n; i++) {
		if (is_lower_than_max_height(boxes[i])) {
			printf("%d\n", get_volume(boxes[i]));
		}
	}
	return 0;
}
******************************Small Triangles, Large Triangles*******************
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct triangle
{
	int a;
	int b;
	int c;
};

typedef struct triangle triangle;
int area(triangle t){
    return((t.a+t.b+t.c)*(t.a+t.b-t.c)*(t.a+t.c-t.b)*(t.b+t.c-t.a));
}
void sort_by_area(triangle* tr, int n) {
	for(int i = 0; i<n - 1; i++)
    for(int j = i + 1; j < n; j++)
        if(area(tr[i]) > area(tr[j])){
            triangle t = tr[i];
            tr[i] = tr[j];
            tr[j] = t;
        }
}

int main()
{
	int n;
	scanf("%d", &n);
	triangle *tr = malloc(n * sizeof(triangle));
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &tr[i].a, &tr[i].b, &tr[i].c);
	}
	sort_by_area(tr, n);
	for (int i = 0; i < n; i++) {
		printf("%d %d %d\n", tr[i].a, tr[i].b, tr[i].c);
	}
	return 0;
}
****************************Post Transition*************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STRING_LENGTH 6

struct package
{
    char* id;
    int weight;
};

typedef struct package package;

struct post_office
{
    int min_weight;
    int max_weight;
    package* packages;
    int packages_count;
};

typedef struct post_office post_office;

struct town
{
    char* name;
    post_office* offices;
    int offices_count;
};

typedef struct town town;

void print_all_packages(town t) {
    printf("%s:\n", t.name);
    for(int i = 0; i < t.offices_count; i ++) {
        printf("\t%d:\n", i);
        for(int j = 0; j < t.offices[i].packages_count; j ++) {
            printf("\t\t%s\n", t.offices[i].packages[j].id);
        }
    }
}

void send_all_acceptable_packages(town* source, int source_office_index, town* target, int target_office_index) {
   
    int min = target -> offices[target_office_index].min_weight;
    int max = target -> offices[target_office_index].max_weight;
    
    for(int i = 0; i < source -> offices[source_office_index].packages_count ; i ++) {
        int weight = source -> offices[source_office_index].packages[i].weight;
        if(weight >= min && weight <= max) {
            target -> offices[target_office_index].packages = realloc(target -> offices[target_office_index].packages, (target -> offices[target_office_index].packages_count + 1) * sizeof(package));
            target -> offices[target_office_index].packages[target -> offices[target_office_index].packages_count] = source -> offices[source_office_index].packages[i];
            (target -> offices[target_office_index].packages_count)++;
            
            for(int j = i; j < source -> offices[source_office_index].packages_count - 1; j ++) {
                source -> offices[source_office_index].packages[j] = source -> offices[source_office_index].packages[j+1];
            }
            source -> offices[source_office_index].packages = realloc(source -> offices[source_office_index].packages, (source -> offices[source_office_index].packages_count - 1)* sizeof(package));
            source -> offices[source_office_index].packages_count --;
            i--;
        }
    }
}

town town_with_most_packages(town* towns, int towns_count) {
    int index = 0, max = 0;
    for(int i = 0; i < towns_count; i ++) {
        int sum = 0;
        for(int j = 0; j < towns[i].offices_count; j ++) {
            sum += towns[i].offices[j].packages_count;
        }
        if(sum > max) {
            max = sum;
            index = i;
        }
    }
    return  towns[index];
}

town* find_town(town* towns, int towns_count, char* name) {
    int i;
    for(i = 0; i < towns_count; i ++) {
        if(! (strcmp(towns[i].name, name)) ) break;
    }
    return towns + i;
}

int main()
{
    int towns_count;
    scanf("%d", &towns_count);
    town* towns = malloc(sizeof(town)*towns_count);
    for (int i = 0; i < towns_count; i++) {
        towns[i].name = malloc(sizeof(char) * MAX_STRING_LENGTH);
        scanf("%s", towns[i].name);
        scanf("%d", &towns[i].offices_count);
        towns[i].offices = malloc(sizeof(post_office)*towns[i].offices_count);
        for (int j = 0; j < towns[i].offices_count; j++) {
            scanf("%d%d%d", &towns[i].offices[j].packages_count, &towns[i].offices[j].min_weight, &towns[i].offices[j].max_weight);
            towns[i].offices[j].packages = malloc(sizeof(package)*towns[i].offices[j].packages_count);
            for (int k = 0; k < towns[i].offices[j].packages_count; k++) {
                towns[i].offices[j].packages[k].id = malloc(sizeof(char) * MAX_STRING_LENGTH);
                scanf("%s", towns[i].offices[j].packages[k].id);
                scanf("%d", &towns[i].offices[j].packages[k].weight);
            }
        }
    }
    int queries;
    scanf("%d", &queries);
    char town_name[MAX_STRING_LENGTH];
    while (queries--) {
        int type;
        scanf("%d", &type);
        switch (type) {
            case 1:
                scanf("%s", town_name);
                town* t = find_town(towns, towns_count, town_name);
                print_all_packages(*t);
                break;
            case 2:
                scanf("%s", town_name);
                town* source = find_town(towns, towns_count, town_name);
                int source_index;
                scanf("%d", &source_index);
                scanf("%s", town_name);
                town* target = find_town(towns, towns_count, town_name);
                int target_index;
                scanf("%d", &target_index);
                send_all_acceptable_packages(source, source_index, target, target_index);
                break;
            case 3:
                printf("Town with the most number of packages is %s\n", town_with_most_packages(towns, towns_count).name);
                break;
        }
    }
    for(int i = 0; i < towns_count; i ++) {
        for (int j = 0; j < towns[i].offices_count; j ++) {
                free(towns[i].offices[j].packages);
        }
        free(towns[i].offices);
    }
    free(towns);
    return 0;
}
********************************************Structuring the Document**************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define MAX_CHARACTERS 1005
#define MAX_PARAGRAPHS 5

struct word {
    char* data;
};

struct sentence {
    struct word* data;
    int word_count;//denotes number of words in a sentence
};

struct paragraph {
    struct sentence* data  ;
    int sentence_count;//denotes number of sentences in a paragraph
};

struct document {
    struct paragraph* data;
    int paragraph_count;//denotes number of paragraphs in a document
};
struct document get_document(char* text) {
     struct document doc;

    int pcount = 0;
    for(int i = 0; i < strlen(text) ; i ++) {
        if(text[i] == '\n') pcount ++;
    }
    pcount ++;

    doc.paragraph_count = pcount;
    doc.data = malloc(pcount * sizeof(struct paragraph));

    for(int n = 0, m = 0, l = 0, i = 0; i < pcount; i ++) {
        int scount = 0;
        while(text[n] != '\n' && n < strlen(text)) {
            if(text[n] == '.') scount ++;
            n ++;
        }
        n ++;

        doc.data[i].sentence_count = scount;
        doc.data[i].data = malloc(scount * sizeof(struct sentence));

        for(int j = 0; j < scount; j ++) {
            int wcount = 0;
            while(text[m] != '.' && m < n) {
                if(text[m] == ' ') wcount ++;
                m ++;
            }
            m ++;
            if(text[m] == '\n') m ++;
            wcount ++;

            doc.data[i].data[j].word_count = wcount;
            doc.data[i].data[j].data = malloc(wcount * sizeof(struct word));

            for(int k = 0; k < wcount; k ++) {
                int ccount = 0;
                while(text[l] != ' ' && text[l] != '.' && l < m) {
                    ccount ++;
                    l ++;
                }
                l ++;
                if(text[l] == '\n') l ++;

                ccount ++;
                doc.data[i].data[j].data[k].data = malloc(ccount * sizeof(char));
            }
        }
    }

    int r = 0;
    for(int i = 0; i < doc.paragraph_count; i ++) {
        for(int j = 0; j < doc.data[i].sentence_count; j ++) {
            for(int k = 0; k < doc.data[i].data[j].word_count; k ++) {
                int l = 0;
                while(text[r] != ' ' && text[r] != '.' && text[r] != '\n') {
                    doc.data[i].data[j].data[k].data[l] = text[r];
                    r++;
                    l++;
                }
                doc.data[i].data[j].data[k].data[l] = '\0';
                if(text[r] == '.') {
                    r++;
                    break;
                }
                r ++;
            }
            if(text[r] == '\n') {
                r ++;
                break;
            }
        }
    }

    return doc;
}

struct word kth_word_in_mth_sentence_of_nth_paragraph(struct document Doc, int k, int m, int n) {
    return Doc.data[n - 1].data[m - 1].data[k - 1];
}

struct sentence kth_sentence_in_mth_paragraph(struct document Doc, int k, int m) { 
    return Doc.data[m - 1].data[k - 1];
}

struct paragraph kth_paragraph(struct document Doc, int k) {
    return Doc.data[k - 1];
}


void print_word(struct word w) {
    printf("%s", w.data);
}

void print_sentence(struct sentence sen) {
    for(int i = 0; i < sen.word_count; i++) {
        print_word(sen.data[i]);
        if (i != sen.word_count - 1) {
            printf(" ");
        }
    }
}

void print_paragraph(struct paragraph para) {
    for(int i = 0; i < para.sentence_count; i++){
        print_sentence(para.data[i]);
        printf(".");
    }
}

void print_document(struct document doc) {
    for(int i = 0; i < doc.paragraph_count; i++) {
        print_paragraph(doc.data[i]);
        if (i != doc.paragraph_count - 1)
            printf("\n");
    }
}

char* get_input_text() {	
    int paragraph_count;
    scanf("%d", &paragraph_count);

    char p[MAX_PARAGRAPHS][MAX_CHARACTERS], doc[MAX_CHARACTERS];
    memset(doc, 0, sizeof(doc));
    getchar();
    for (int i = 0; i < paragraph_count; i++) {
        scanf("%[^\n]%*c", p[i]);
        strcat(doc, p[i]);
        if (i != paragraph_count - 1)
            strcat(doc, "\n");
    }

    char* returnDoc = (char*)malloc((strlen (doc)+1) * (sizeof(char)));
    strcpy(returnDoc, doc);
    return returnDoc;
}

int main() 
{
    char* text = get_input_text();
    struct document Doc = get_document(text);

    int q;
    scanf("%d", &q);

    while (q--) {
        int type;
        scanf("%d", &type);

        if (type == 3){
            int k, m, n;
            scanf("%d %d %d", &k, &m, &n);
            struct word w = kth_word_in_mth_sentence_of_nth_paragraph(Doc, k, m, n);
            print_word(w);
        }

        else if (type == 2) {
            int k, m;
            scanf("%d %d", &k, &m);
            struct sentence sen= kth_sentence_in_mth_paragraph(Doc, k, m);
            print_sentence(sen);
        }

        else{
            int k;
            scanf("%d", &k);
            struct paragraph para = kth_paragraph(Doc, k);
            print_paragraph(para);
        }
        printf("\n");
    }     
}
